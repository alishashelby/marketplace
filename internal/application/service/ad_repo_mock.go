// Code generated by MockGen. DO NOT EDIT.
// Source: ad_service.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	entity "github.com/alishashelby/marketplace/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockAdRepository is a mock of AdRepository interface.
type MockAdRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdRepositoryMockRecorder
}

// MockAdRepositoryMockRecorder is the mock recorder for MockAdRepository.
type MockAdRepositoryMockRecorder struct {
	mock *MockAdRepository
}

// NewMockAdRepository creates a new mock instance.
func NewMockAdRepository(ctrl *gomock.Controller) *MockAdRepository {
	mock := &MockAdRepository{ctrl: ctrl}
	mock.recorder = &MockAdRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdRepository) EXPECT() *MockAdRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockAdRepository) FindAll(ops *entity.Options) ([]*entity.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ops)
	ret0, _ := ret[0].([]*entity.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockAdRepositoryMockRecorder) FindAll(ops interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockAdRepository)(nil).FindAll), ops)
}

// Save mocks base method.
func (m *MockAdRepository) Save(ad *entity.Ad) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ad)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAdRepositoryMockRecorder) Save(ad interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAdRepository)(nil).Save), ad)
}
